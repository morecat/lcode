//ÂõΩÈôÖÊë©Â∞îÊñØÂØÜÁ†ÅÂÆö‰πâ‰∏ÄÁßçÊ†áÂáÜÁºñÁ†ÅÊñπÂºèÔºåÂ∞ÜÊØè‰∏™Â≠óÊØçÂØπÂ∫î‰∫é‰∏Ä‰∏™Áî±‰∏ÄÁ≥ªÂàóÁÇπÂíåÁü≠Á∫øÁªÑÊàêÁöÑÂ≠óÁ¨¶‰∏≤Ôºå ÊØîÂ¶Ç: 
//
// 
// 'a' ÂØπÂ∫î ".-" Ôºå 
// 'b' ÂØπÂ∫î "-..." Ôºå 
// 'c' ÂØπÂ∫î "-.-." Ôºå‰ª•Ê≠§Á±ªÊé®„ÄÇ 
// 
//
// ‰∏∫‰∫ÜÊñπ‰æøÔºåÊâÄÊúâ 26 ‰∏™Ëã±ÊñáÂ≠óÊØçÁöÑÊë©Â∞îÊñØÂØÜÁ†ÅË°®Â¶Ç‰∏ãÔºö 
//
// 
//[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--
//","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.
//."] 
//
// Áªô‰Ω†‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤Êï∞ÁªÑ words ÔºåÊØè‰∏™ÂçïËØçÂèØ‰ª•ÂÜôÊàêÊØè‰∏™Â≠óÊØçÂØπÂ∫îÊë©Â∞îÊñØÂØÜÁ†ÅÁöÑÁªÑÂêà„ÄÇ 
//
// 
// ‰æãÂ¶ÇÔºå"cab" ÂèØ‰ª•ÂÜôÊàê "-.-..--..." Ôºå(Âç≥ "-.-." + ".-" + "-..." Â≠óÁ¨¶‰∏≤ÁöÑÁªìÂêà)„ÄÇÊàë‰ª¨Â∞ÜËøôÊ†∑‰∏Ä‰∏™ËøûÊé•ËøáÁ®ãÁß∞‰Ωú Âçï
//ËØçÁøªËØë „ÄÇ 
// 
//
// ÂØπ words ‰∏≠ÊâÄÊúâÂçïËØçËøõË°åÂçïËØçÁøªËØëÔºåËøîÂõû‰∏çÂêå ÂçïËØçÁøªËØë ÁöÑÊï∞Èáè„ÄÇ 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// 
//ËæìÂÖ•: words = ["gin", "zen", "gig", "msg"]
//ËæìÂá∫: 2
//Ëß£Èáä: 
//ÂêÑÂçïËØçÁøªËØëÂ¶Ç‰∏ã:
//"gin" -> "--...-."
//"zen" -> "--...-."
//"gig" -> "--...--."
//"msg" -> "--...--."
//
//ÂÖ±Êúâ 2 Áßç‰∏çÂêåÁøªËØë, "--...-." Âíå "--...--.".
// 
//
// Á§∫‰æã 2Ôºö 
//
// 
//ËæìÂÖ•Ôºöwords = ["a"]
//ËæìÂá∫Ôºö1
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 1 <= words.length <= 100 
// 1 <= words[i].length <= 12 
// words[i] Áî±Â∞èÂÜôËã±ÊñáÂ≠óÊØçÁªÑÊàê 
// 
// Related Topics Êï∞ÁªÑ ÂìàÂ∏åË°® Â≠óÁ¨¶‰∏≤ üëç 234 üëé 0

package leetcode.editor.cn;

import java.util.*;

public class UniqueMorseCodeWords {

    public static void main(String[] args) {
        Solution solution = new UniqueMorseCodeWords().new Solution();
    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class Solution {

        public int uniqueMorseRepresentations(String[] words) {
            String[] MAP = new String[]{".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."};
            Set<String> set = new HashSet<>();
            for (String word : words) {
                StringBuilder builder = new StringBuilder();
                for (char c : word.toCharArray()) {
                    builder.append(MAP[c - 'a']);
                }
                set.add(builder.toString());
            }
            return set.size();
        }
    }
//leetcode submit region end(Prohibit modification and deletion)


    private static void print(boolean b) {
        System.out.println(b);
    }

    private static void print(double d) {
        System.out.println(d);
    }

    private static void print(float f) {
        System.out.println(f);
    }

    private static void print(long l) {
        System.out.println(l);
    }

    private static void print(int i) {
        System.out.println(i);
    }

    private static void print(byte i) {
        System.out.println(i);
    }

    private static void print(char i) {
        System.out.println(i);
    }

    private static void print(short i) {
        System.out.println(i);
    }

    private static void print(String str) {
        System.out.println(str);
    }

    private static void print(boolean[] arrays) {
        for (boolean item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(double[] arrays) {
        for (double item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(float[] arrays) {
        for (float item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(long[] arrays) {
        for (long item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(int[] arrays) {
        for (int item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(char[] arrays) {
        for (char item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(Object[] arrays) {
        for (Object item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static <T> void print(Collection<T> collection) {
        for (T item : collection) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(int[][] arrays) {
        for (int[] item : arrays) {
            System.out.println(Arrays.toString(item));
        }
        System.out.println();
    }

    private static void print(String[][] arrays) {
        for (String[] item : arrays) {
            System.out.println(Arrays.toString(item));
        }
        System.out.println();
    }
}