//Áªô‰Ω†‰∏Ä‰∏™‰∫åÂèâÊ†ëÁöÑÊ†πËäÇÁÇπ root ÔºåÊ†ë‰∏≠ÊØè‰∏™ËäÇÁÇπÈÉΩÂ≠òÊîæÊúâ‰∏Ä‰∏™ 0 Âà∞ 9 ‰πãÈó¥ÁöÑÊï∞Â≠ó„ÄÇ
//
// 
// 
// ÊØèÊù°‰ªéÊ†πËäÇÁÇπÂà∞Âè∂ËäÇÁÇπÁöÑË∑ØÂæÑÈÉΩ‰ª£Ë°®‰∏Ä‰∏™Êï∞Â≠óÔºö 
// 
// 
//
// 
// ‰æãÂ¶ÇÔºå‰ªéÊ†πËäÇÁÇπÂà∞Âè∂ËäÇÁÇπÁöÑË∑ØÂæÑ 1 -> 2 -> 3 Ë°®Á§∫Êï∞Â≠ó 123 „ÄÇ 
// 
//
// ËÆ°ÁÆó‰ªéÊ†πËäÇÁÇπÂà∞Âè∂ËäÇÁÇπÁîüÊàêÁöÑ ÊâÄÊúâÊï∞Â≠ó‰πãÂíå „ÄÇ 
//
// Âè∂ËäÇÁÇπ ÊòØÊåáÊ≤°ÊúâÂ≠êËäÇÁÇπÁöÑËäÇÁÇπ„ÄÇ 
//
// 
//
// Á§∫‰æã 1Ôºö 
// 
// 
//ËæìÂÖ•Ôºöroot = [1,2,3]
//ËæìÂá∫Ôºö25
//Ëß£ÈáäÔºö
//‰ªéÊ†πÂà∞Âè∂Â≠êËäÇÁÇπË∑ØÂæÑ 1->2 ‰ª£Ë°®Êï∞Â≠ó 12
//‰ªéÊ†πÂà∞Âè∂Â≠êËäÇÁÇπË∑ØÂæÑ 1->3 ‰ª£Ë°®Êï∞Â≠ó 13
//Âõ†Ê≠§ÔºåÊï∞Â≠óÊÄªÂíå = 12 + 13 = 25 
//
// Á§∫‰æã 2Ôºö 
// 
// 
//ËæìÂÖ•Ôºöroot = [4,9,0,5,1]
//ËæìÂá∫Ôºö1026
//Ëß£ÈáäÔºö
//‰ªéÊ†πÂà∞Âè∂Â≠êËäÇÁÇπË∑ØÂæÑ 4->9->5 ‰ª£Ë°®Êï∞Â≠ó 495
//‰ªéÊ†πÂà∞Âè∂Â≠êËäÇÁÇπË∑ØÂæÑ 4->9->1 ‰ª£Ë°®Êï∞Â≠ó 491
//‰ªéÊ†πÂà∞Âè∂Â≠êËäÇÁÇπË∑ØÂæÑ 4->0 ‰ª£Ë°®Êï∞Â≠ó 40
//Âõ†Ê≠§ÔºåÊï∞Â≠óÊÄªÂíå = 495 + 491 + 40 = 1026
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// Ê†ë‰∏≠ËäÇÁÇπÁöÑÊï∞ÁõÆÂú®ËåÉÂõ¥ [1, 1000] ÂÜÖ 
// 0 <= Node.val <= 9 
// Ê†ëÁöÑÊ∑±Â∫¶‰∏çË∂ÖËøá 10 
// 
//
// Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ‰∫åÂèâÊ†ë üëç 719 üëé 0

package leetcode.editor.cn;

import java.util.Arrays;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

public class SumRootToLeafNumbers {


    public class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        TreeNode() {
        }

        TreeNode(int val) {
            this.val = val;
        }

        TreeNode(int val, TreeNode left, TreeNode right) {
            this.val = val;
            this.left = left;
            this.right = right;
        }
    }

    public static void main(String[] args) {
        Solution solution = new SumRootToLeafNumbers().new Solution();

    }

//leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {

        private final List<Integer> list = new LinkedList<>();

        public int sumNumbers(TreeNode root) {
            int sum = 0;
            travel(root, 0);
            for (int i : list) {
                sum += i;
            }
            return sum;
        }

        private void travel(TreeNode root, int base) {
            if (root.left == null && root.right == null) {
                list.add(base * 10 + root.val);
                return;
            }
            if (root.left != null) {
                travel(root.left, base * 10 + root.val);
            }
            if (root.right != null) {
                travel(root.right, base * 10 + root.val);
            }
        }
    }
//leetcode submit region end(Prohibit modification and deletion)


    private static void print(boolean b) {
        System.out.println(b);
    }

    private static void print(double d) {
        System.out.println(d);
    }

    private static void print(float f) {
        System.out.println(f);
    }

    private static void print(long l) {
        System.out.println(l);
    }

    private static void print(int i) {
        System.out.println(i);
    }

    private static void print(byte i) {
        System.out.println(i);
    }

    private static void print(char i) {
        System.out.println(i);
    }

    private static void print(short i) {
        System.out.println(i);
    }

    private static void print(String str) {
        System.out.println(str);
    }

    private static void print(boolean[] arrays) {
        for (boolean item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(double[] arrays) {
        for (double item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(float[] arrays) {
        for (float item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(long[] arrays) {
        for (long item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(int[] arrays) {
        for (int item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(char[] arrays) {
        for (char item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(Object[] arrays) {
        for (Object item : arrays) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static <T> void print(Collection<T> collection) {
        for (T item : collection) {
            System.out.print(item + " ");
        }
        System.out.println();
    }

    private static void print(int[][] arrays) {
        for (int[] item : arrays) {
            System.out.println(Arrays.toString(item));
        }
        System.out.println();
    }

    private static void print(String[][] arrays) {
        for (String[] item : arrays) {
            System.out.println(Arrays.toString(item));
        }
        System.out.println();
    }
}